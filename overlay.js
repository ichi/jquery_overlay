// Generated by CoffeeScript 1.3.3
(function() {
  var $body, $html, $win, Overlay,
    __slice = [].slice;

  $win = $(window);

  $html = $('html');

  $body = $('body');

  $.getPageSize || ($.getPageSize = function() {
    var page_h, page_w, w, win_h, win_w, x_scroll, y_scroll, _ref, _ref1;
    _ref = (function() {
      switch (false) {
        case !(window.innerHeight && window.scrollMaxY):
          return [window.innerWidth + window.scrollMaxX, window.innerHeight + window.scrollMaxY];
        case !(document.body.scrollHeight > document.body.offsetHeight):
          return [document.body.scrollWidth, document.body.scrollHeight];
        default:
          return [document.body.offsetWidth, document.body.offsetHeight];
      }
    })(), x_scroll = _ref[0], y_scroll = _ref[1];
    _ref1 = (function() {
      var _ref1, _ref2;
      switch (false) {
        case !self.innerHeight:
          w = ((_ref1 = document.documentElement) != null ? _ref1.clientWidth : void 0) || self.innerWidth;
          return [w, self.innerHeight];
        case !((_ref2 = document.documentElement) != null ? _ref2.clientHeight : void 0):
          return [document.documentElement.clientWidth, document.documentElement.clientHeight];
        case !document.body:
          return [document.body.clientWidth, document.body.clientHeight];
      }
    })(), win_w = _ref1[0], win_h = _ref1[1];
    page_w = x_scroll < win_w ? x_scroll : win_w;
    page_h = y_scroll < win_h ? win_h : y_scroll;
    return {
      page: {
        width: page_w,
        height: page_h
      },
      window: {
        width: win_w,
        height: win_h
      }
    };
  });

  $.Overlay = Overlay = (function() {

    Overlay.uid = 0;

    Overlay.all = $([]);

    Overlay.page_size = [];

    Overlay.create = function(settings) {
      return new Overlay(settings);
    };

    Overlay.getCenterPosition = function() {
      var height, position_fixed, size, width, width_height, _i, _ref;
      width_height = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), position_fixed = arguments[_i++];
      _ref = (function() {
        switch (width_height.length) {
          case 0:
            throw 'not enough arguments';
            break;
          case 1:
            size = width_height[0];
            if ($.isArray(size)) {
              return size;
            } else {
              return [size, size];
            }
            break;
          default:
            return width_height;
        }
      })(), width = _ref[0], height = _ref[1];
      return {
        top: (this.page_size.window.height - height) / 2 + (position_fixed ? 0 : $win.scrollTop()),
        left: (this.page_size.window.width - width) / 2
      };
    };

    Overlay.cssCenterPosition = function() {
      var $elm, args, position_fixed, width_height, _i;
      $elm = arguments[0], width_height = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), position_fixed = arguments[_i++];
      args = width_height.concat([position_fixed]);
      return $elm.css(this.getCenterPosition.apply(this, args));
    };

    function Overlay(settings) {
      var close_on_click, page_size, self,
        _this = this;
      self = this;
      this.status = {
        visible: false,
        opend: false
      };
      this.on_open = {
        always: false,
        done: false,
        fail: false
      };
      this.on_close = {
        always: false,
        done: false,
        fail: false
      };
      this.settings = $.extend({
        bg_color: "#000000",
        opacity: 0.5,
        fade_speed: 400,
        overlay_class: "pageOverlay",
        close_on_click: true
      }, settings);
      page_size = Overlay.page_size = $.getPageSize();
      this.id = this.settings.overlay_class + Overlay.uid++;
      this.overlay = $('<div></div>').attr({
        "class": this.settings.overlay_class,
        id: this.id
      }).css({
        display: "none",
        width: page_size.window.width,
        height: page_size.page.height,
        position: "absolute",
        top: 0,
        left: 0,
        backgroundColor: this.settings.bg_color,
        opacity: 0
      });
      $win.off('resize.overlay_resize').on('resize.overlay_resize', function(ev) {
        page_size = Overlay.page_size = $.getPageSize();
        return Overlay.all.css({
          width: page_size.window.width,
          height: page_size.page.height
        });
      });
      if (close_on_click = this.settings.close_on_click) {
        this.overlay.on('click', function(ev) {
          var promise;
          promise = _this.close();
          if ($.isFunction(close_on_click)) {
            return promise.done(close_on_click);
          }
        });
      }
      this.overlay.appendTo($('body'));
      Overlay.all = Overlay.all.add(this.overlay);
    }

    Overlay.prototype.open = function(speed) {
      var self,
        _this = this;
      self = this;
      this._dfd_open = new $.Deferred();
      this._assign_callbacks(this._dfd_open, this.on_open);
      if (!this.status.visible) {
        this._selects = $('select:visible').hide();
        this.status.visible = true;
        this.overlay.show().fadeTo(speed || this.settings.fade_speed, this.settings.opacity, function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _this.status.opend = true;
          return _this._dfd_open.resolve.apply(_this._dfd_open, args);
        });
      }
      return this._dfd_open.promise();
    };

    Overlay.prototype.close = function(speed) {
      var self,
        _this = this;
      self = this;
      this._dfd_close = new $.Deferred();
      this._assign_callbacks(this._dfd_close, this.on_close);
      if (this.status.visible) {
        if (!this.status.opend) {
          this._dfd_open.reject();
        }
        this.status.opend = false;
        this.overlay.stop().fadeTo(speed || this.settings.fade_speed, 0, function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _this.overlay.hide();
          _this._selects.show();
          _this.status.visible = false;
          return _this._dfd_close.resolve.apply(_this._dfd_close, args);
        });
      }
      return this._dfd_close.promise();
    };

    Overlay.prototype.getCenterPosition = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Overlay.getCenterPosition.apply(Overlay, args);
    };

    Overlay.prototype.cssCenterPosition = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Overlay.cssCenterPosition.apply(Overlay, args);
    };

    Overlay.prototype._assign_callbacks = function(dfd, callbacks) {
      if (callbacks == null) {
        callbacks = {};
      }
      return $.each(callbacks, function(name, callback) {
        return dfd[name](callback);
      });
    };

    return Overlay;

  })();

}).call(this);
